type t
(** The type of the inertiajs driver. *)

type page
(** The type of a page, see {{:https://inertiajs.com/the-protocol#the-page-object} The page object}. *)

type json = Yojson.Safe.t
(** The JSON type. *)

val add_flash_message : Dream.request -> json -> unit
(** Add some data to a flash message. Data added through this method will be available to your page in 
    the errors prop. if flash data is already present, this will merge it. *)

val init : version:string -> root_view:(string -> string) -> unit -> t
(** [init version root_view ()] initialize a driver with the assets version set to [version],
    on standard visits, the root view HTML will be generated by passing the string representation of a page data
    to the [root_view] function *)

val middleware : t -> Dream.middleware
(** Manage assets versioning, csfr token, and non post redirection status. *)

val page :
  component:string -> ?props:(string * json) list -> url:string -> unit -> page
(** [page component props url ()] create a new page data. *)

val with_prop : page -> string -> json -> page
(** [with_prop page key prop] create a copy of the page with this property added,
    if the key already exists it will be replaced. *)

val with_url : page -> string -> page
(** [with_url page url ] create a copy of the page with a new URL. *)

val add_shared_data : Dream.request -> string -> json -> unit Lwt.t

val inertia_response :
  t ->
  ?headers:(string * string) list ->
  ?status:Dream.status ->
  Dream.request ->
  page ->
  Dream.response Lwt.t
(** Create a new Dream response by rendering the page data.
    The page will be rendered either as text/html for standard visit, or application/json for inertia request *)

(** Helper module, it contains default implementation you may want to re-implement for your use cases. *)
module Helper : sig
  val root_view : js:string -> css:string -> string -> string
  (** [create js css] create a root view for standard visit.
    The template is basic but should be sufficient for most usage.

    [js] the path to the JavaScript asssets.

    [css] the path to the CSS assets*)

  val error_handler : t -> Dream.error_handler -> Dream.error_handler
  (** Inertia aware error handler, it passes the error to the provided error handler for any non-inertia request. *)
end
