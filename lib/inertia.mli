type page = {
  (* The name of view template in view/src/Pages *)
  component : string;
  (* The data to create the frontend component *)
  props : (string * Yojson.Safe.t) list;
  url : string;
}

val page :
  component:string ->
  ?props:(string * Yojson.Safe.t) list ->
  url:string ->
  unit ->
  page
(** [page component props url ()] create a new page data. *)

val render :
  ?headers:(string * string) list ->
  ?status:Dream.status ->
  Dream.request ->
  page ->
  Dream.response Lwt.t
(** Create a new Dream response by rendering the page data. The page will be
    rendered either as text/html for standard visit, or application/json for
    inertia request *)

val middleware :
  version:string -> root_view:(string -> string) -> unit -> Dream.middleware
(** [middleware version root_view ()] initialize inertiajs and return a
    middleware that should be added to dream.

    The he assets version set to [version], on standard visits, the root view
    HTML will be generated by passing the string representation of a page data
    to the [root_view] function *)

val add_error : Dream.request -> Yojson.Safe.t -> unit
(** Add some data to a flash message. Data added through this method will be
    available to your page in the errors prop. if flash data is already present,
    this will merge it. *)

val add_shared_data : Dream.request -> string -> Yojson.Safe.t -> unit Lwt.t

(** Helper module, it contains default implementation you may want to
    re-implement for your use cases. *)
module Helper : sig
  val root_view : js:string -> css:string -> string -> string
  (** [create js css] create a root view for standard visit. The template is
      basic but should be sufficient for most usage.

      [js] the path to the JavaScript asssets.

      [css] the path to the CSS assets*)
end
